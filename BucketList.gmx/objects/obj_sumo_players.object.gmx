<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sumo_players</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>angleRate = 5; // Degrees to turn per step
offset = 18; // Pixel offset of players from the center
pushDistance = 4; // Push distance in pixels
image_speed = 0;
fallen = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 1 -&gt; forward, 0 -&gt; nowhere, -1 -&gt; backward
var lDir = input_check_pressed(PLAYER.PLAYER1, INPUT.UP) - input_check_pressed(PLAYER.PLAYER1, INPUT.DOWN);
var rDir = input_check_pressed(PLAYER.PLAYER2, INPUT.UP) - input_check_pressed(PLAYER.PLAYER2, INPUT.DOWN);

// Handle right side
if (rDir != 0 &amp;&amp; !fallen) {
    // Position of left player
    var lastX = x - lengthdir_x(offset, image_angle - 90);
    var lastY = y - lengthdir_y(offset, image_angle - 90);
    
    image_angle += angleRate * rDir;
    
    x = lastX + lengthdir_x(offset, image_angle - 90);
    y = lastY + lengthdir_y(offset, image_angle - 90);
    
    image_index = 2;
}

// Handle left side
if (lDir != 0 &amp;&amp; !fallen) {
    // Position of left player
    var lastX = x - lengthdir_x(offset, image_angle + 90);
    var lastY = y - lengthdir_y(offset, image_angle + 90);
    
    image_angle -= angleRate * lDir;
    
    x = lastX + lengthdir_x(offset, image_angle + 90);
    y = lastY + lengthdir_y(offset, image_angle + 90);
    
    image_index = 1;
}

// Push the sumo
if ((lDir != 0 || rDir != 0) &amp;&amp; instance_place(x, y, obj_sumo) &amp;&amp; !fallen) {
    obj_sumo.x += lengthdir_x(pushDistance, image_angle);
    obj_sumo.y += lengthdir_y(pushDistance, image_angle);
}

if (!instance_place(x, y, obj_sumo_ring))
{
    fallen = 1;
    sprite_index = spr_sumo_players_fall;
    depth = 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,36</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
