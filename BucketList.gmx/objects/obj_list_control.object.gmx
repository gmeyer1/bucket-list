<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>centerLine = 122;
lineHeight = 26;
delay = room_speed * 3;
blinkRate = room_speed * 0.2;
blinkSteps = 0;

if (global.level == 0) {
    alarm[1] = delay;
} else {
    alarm[0] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var next = ds_list_find_value(global.levels, global.level);
global.level++;
room_goto(next);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(-320, centerLine - lineHeight, obj_list_hand);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[1] &gt; 0) {
    blinkSteps++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fnt_list);

var textColour = make_colour_rgb(30, 30, 30);
var textColourBlink = make_colour_rgb(255, 0, 0);

var lineColour = make_colour_rgb(60, 60, 60);
var lineWidth = 3;

var oldAlpha = 0.6;
var newAlpha = 1.0;
var lineAlpha = 0.8;

// Draw each level on the list
for (var i = 0; i &lt;= global.level; i++) {
    // Lighter colors for old levels
    if (i &gt; 0) {
        draw_set_alpha(oldAlpha);
        draw_set_color(textColour);
    
    // Dark, blinking for new level
    } else {
        draw_set_alpha(newAlpha);

        // If the hand has left the screen, do some kooky math shit to make the name blink
        if (i == 0 &amp;&amp;
            alarm[1] &gt; 0 &amp;&amp;
            (blinkSteps % (blinkRate * 2)) &lt; blinkRate) {
            
            draw_set_color(textColourBlink);
            
        } else {
            draw_set_color(textColour);
        }
    }

    // Get data about this level
    var level = ds_list_find_value(global.levels, global.level - i);
    var name = ds_map_find_value(global.names, level);
    var textX = 160;
    var textY = centerLine - i * lineHeight;
    
    // Draw name
    draw_text(textX, textY, name);
    
    // The number of levels to leave uncrossed
    var startCross = 0;
    if (global.level &gt; 0) {
        startCross = 1;
    }
    
    // Cross out finished levels
    if (i &gt; startCross) {
        draw_set_alpha(lineAlpha);
        var width = string_width(name);
        draw_line_width_colour(
            textX - width / 2,
            textY,
            textX + width / 2 + 4,
            textY,
            lineWidth,
            lineColour,
            lineColour
        );
    }
}

// Draw the animated line
var level = ds_list_find_value(global.levels, global.level - 1);
var name = ds_map_find_value(global.names, level);
var textX = 160;
var textY = centerLine - 26;
var width = string_width(name);
var left = textX - width / 2;
var right = textX + width / 2 + 4;

if (instance_exists(obj_list_hand) &amp;&amp; obj_list_hand.x &gt; left) {
    draw_set_alpha(lineAlpha);
    draw_line_width_colour(
        left,
        textY,
        min(obj_list_hand.x, right),
        textY,
        lineWidth,
        lineColour,
        lineColour
    );
}

// Reset alpha
draw_set_alpha(1.0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
