<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_seesaw</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>angleVel = 0; // Current angular velocity
playerAccel = 0.06; // Acceleration due to players pressing down
tipAccel = 0.08; // Acceleration due to gravity
pointAngle = 15; // Angle to get a point
failAngle = 50; // Angle to fail the game
lastSide = 0; // The last player who tipped down (-1 -&gt; P1, 0 -&gt; nobody, 1 -&gt; P2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (input_check(PLAYER.PLAYER1, INPUT.DOWN) || input_check(PLAYER.PLAYER1, INPUT.A)) {
    angleVel += playerAccel;
}

if (input_check(PLAYER.PLAYER2, INPUT.DOWN) || input_check(PLAYER.PLAYER2, INPUT.A)) {
    angleVel -= playerAccel;
}

// Tip based on angle
angleVel += sin(degtorad(image_angle)) * tipAccel;
image_angle += angleVel;

// Get points
var absAngle = abs(image_angle);
if ((lastSide == -1 &amp;&amp; image_angle &gt; pointAngle) ||
    (lastSide == 1 &amp;&amp; image_angle &lt; -pointAngle) ||
    (lastSide == 0 &amp;&amp; absAngle &gt; pointAngle)) {
    
    lastSide = sign(image_angle);
    obj_childhood_point_counter.points += 0.5;
}

// Fail
if (absAngle &gt; failAngle) {
    gravity = 0.3;
    hspeed = -image_angle * 0.02;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>98,64</point>
    <point>98,98</point>
  </PhysicsShapePoints>
</object>
