<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sumo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>angleRate = 6; // Degrees to turn per step
offset = 24; // Pixel offset of feet from the center
stepTime = room_speed * 0.3; // How long to wait between taking steps
pushDistance = 5; // Pixels to push player

alarm[0] = stepTime;
image_speed = 0;
fallen = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var offsetX = obj_sumo_players.x - x;
var offsetY = obj_sumo_players.y - y;
var facingX = lengthdir_x(1, image_angle);
var facingY = lengthdir_y(1, image_angle);

// Use MATH to get direction (negative -&gt; left, positive -&gt; right)
// http://forum.unity3d.com/threads/left-right-test-function.31420/#post-1402557
var dir = -offsetX * facingY + offsetY * facingX;

// Right step
if (dir &lt; 0  &amp;&amp; !fallen) {
    // Position of left foot
    var lastX = x - lengthdir_x(offset, image_angle - 90);
    var lastY = y - lengthdir_y(offset, image_angle - 90);
    
    image_angle += angleRate;
    
    x = lastX + lengthdir_x(offset, image_angle - 90);
    y = lastY + lengthdir_y(offset, image_angle - 90);
    
    image_index = 1;
    
// Left step
} else if (!fallen) {
    // Position of right foot
    var lastX = x - lengthdir_x(offset, image_angle + 90);
    var lastY = y - lengthdir_y(offset, image_angle + 90);
    
    image_angle -= angleRate;
    
    x = lastX + lengthdir_x(offset, image_angle + 90);
    y = lastY + lengthdir_y(offset, image_angle + 90);
    
    image_index = 2;
}

// Push back players
if (instance_place(x, y, obj_sumo_players) &amp;&amp; !fallen) {
    obj_sumo_players.x += lengthdir_x(pushDistance, image_angle);
    obj_sumo_players.y += lengthdir_y(pushDistance, image_angle);
}

alarm[0] = stepTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_place(x, y, obj_sumo_ring) &amp;&amp; !fallen)
{
    fallen = 1;
    sprite_index = spr_sumo_fall;
    depth = 5;
    alarm[1] = room_speed;
    audio_play_sound(dingdong, 100, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,36</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
